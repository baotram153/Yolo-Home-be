// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  avatar_url    String?    @map("avatar_url")
  password      String
  created_at     DateTime  @default(now()) @map("created_at")
  updated_at     DateTime  @updatedAt      @map("updated_at")

  devices       Device[]
  notifications Notification[]
  tokens        UserSession?

  @@map("users")
}

model Device {
  id            String        @id @default(uuid())
  name          String?
  type          String?
  user_id        String        @map("user_id")
  created_at     DateTime      @default(now()) 
  updated_at     DateTime      @updatedAt
  room          String        

  user          User          @relation(fields: [user_id], references: [id], onDelete: Cascade)

  device_logs           DeviceLog[]
  device_commands       DeviceCommand[]
  automation_scenarios  AutomationScenario[]
  feeds                 Feed[]

  @@map("device")
}

model DeviceLog {
  id            String    @id @default(uuid())
  device_id     String
  value         String
  created_at     DateTime  @default(now())   
  updated_at     DateTime  @updatedAt
  device        Device    @relation(fields: [device_id], references: [id], onDelete: Cascade)

  @@map("device_log")
}

model DeviceCommand {
  id            String    @id @default(uuid())
  device_id      String
  command       String?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  device        Device    @relation(fields: [device_id], references: [id], onDelete: Cascade)

  @@map("device_command")
}

model AutomationScenario {
  id                  String    @id @default(uuid())
  set_by_condition    Boolean   @default(false)
  set_by_time         Boolean   @default(false)

  condition           String?
  threshold           Int?
  interval            Int?

  start_time          DateTime?
  end_time            DateTime?

  status              String    @default("active")
  device_id           String?

  device              Device?   @relation(fields: [device_id], references: [id], onDelete: Cascade)

  @@map("automation_scenario")
}

model Notification {
  id            String    @id @default(uuid())
  user_id        String
  type          String?
  message       String?
  status        String?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notification")
}

model UserSession {
  id            String    @id @default(uuid())
  user_id        String    @unique
  token         String?   @unique
  expires_at     DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_session")
} 

model Feed {
  id        String    @id @default(uuid())
  feed_name       String    @unique
  description String?
  device_id   String    

  device      Device    @relation(fields: [device_id], references: [id], onDelete: Cascade)
}